{ lib
, pkgs
, ...
}: {
  # Containers
  virtualisation.oci-containers.containers."memos" = {
    image = "neosmemo/memos:stable";
    volumes = [
      "/home/ver/.memos:/var/opt/memos:rw"
    ];
    ports = [
      "5230:5230/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=memos"
      "--network=memos_default"
    ];
  };
  systemd.services."podman-memos" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "podman-network-memos_default.service"
    ];
    requires = [
      "podman-network-memos_default.service"
    ];
    partOf = [
      "podman-compose-memos-root.target"
    ];
    wantedBy = [
      "podman-compose-memos-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-memos_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f memos_default";
    };
    script = ''
      podman network inspect memos_default || podman network create memos_default
    '';
    partOf = [ "podman-compose-memos-root.target" ];
    wantedBy = [ "podman-compose-memos-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-memos-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
